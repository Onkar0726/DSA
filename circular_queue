public class CircularQueue {
    private int maxSize;
    private int[] queueArray;
    private int front;
    private int rear;

    public CircularQueue(int size) {
        maxSize = size;
        queueArray = new int[maxSize];
        front = -1;
        rear = -1;
    }

    public void enqueue(int item) {
        if (isEmpty()) {
            front = 0;
            rear = 0;
            queueArray[rear] = item;
        } else {
            int newRear = (rear + 1) % maxSize;
            if (newRear == front) {
                System.out.println("Queue is full. Cannot enqueue.");
            } else {
                rear = newRear;
                queueArray[rear] = item;
            }
        }
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return -1;
        }
        int item = queueArray[front];
        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            front = (front + 1) % maxSize;
        }
        return item;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. No peek value.");
            return -1;
        }
        return queueArray[front];
    }

    public boolean isEmpty() {
        return front == -1;
    }
}
